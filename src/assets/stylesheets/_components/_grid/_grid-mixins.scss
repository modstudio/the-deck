.container {
    width: 100%;
    margin: 0 auto;
    padding-left: ($grid-gutter-width / 2) + px;
    padding-right: ($grid-gutter-width / 2) + px;
    @include respond-to(xs_up){
      max-width: map-get($container-media-list, xs);
    }
    @include respond-to(sm_up){
      max-width: map-get($container-media-list, sm);
    }
    @include respond-to(md_up){
      max-width: map-get($container-media-list, md);
    }
    @include respond-to(lg_up){
      max-width: map-get($container-media-list, lg);
    }
    &--sm{
      @include respond-to(lg_up){
        max-width: 1000px;
      }
    }
}

.row {
    margin-left: ($grid-gutter-width / -2) + px;
    margin-right: ($grid-gutter-width / -2) + px;
    position: relative;
    display: flex;
    flex-wrap: wrap;
    &.gutter--xl{
      margin-left: ($grid-gutter-width * -1) + px;
      margin-right: ($grid-gutter-width * -1) + px;
      @include respond-to(lg){
        margin-left: ($grid-gutter-width / -2) + px;
        margin-right: ($grid-gutter-width / -2) + px;
      }
      > .col, > [class^="col-"], > [class*=" col-"]{
        padding-left: ($grid-gutter-width * 1) + px;
        padding-right: ($grid-gutter-width * 1) + px;
        @include respond-to(lg){
          padding-left: ($grid-gutter-width / 2) + px;
          padding-right: ($grid-gutter-width / 2) + px;
        }
      }
    }
    &.gutter--lg{
      margin-left: ($grid-gutter-width * -0.8) + px;
      margin-right: ($grid-gutter-width * -0.8) + px;
      @include respond-to(md){
        margin-left: ($grid-gutter-width / -2) + px;
        margin-right: ($grid-gutter-width / -2) + px;
      }
      > .col, > [class^="col-"], > [class*=" col-"]{
        padding-left: ($grid-gutter-width * 0.8) + px;
        padding-right: ($grid-gutter-width * 0.8) + px;
        @include respond-to(md){
          padding-left: ($grid-gutter-width / 2) + px;
          padding-right: ($grid-gutter-width / 2) + px;
        }
      }
    }
    &.gutter--md{
      margin-left: -$grid-gutter-width + px;
      margin-right: -$grid-gutter-width + px;
      @include respond-to(md){
        margin-left: ($grid-gutter-width / -2) + px;
        margin-right: ($grid-gutter-width / -2) + px;
      }
      > .col, > [class^="col-"], > [class*=" col-"]{
        padding-left: $grid-gutter-width + px;
        padding-right: $grid-gutter-width + px;
        @include respond-to(md){
          padding-left: ($grid-gutter-width / 2) + px;
          padding-right: ($grid-gutter-width / 2) + px;
        }
      }
    }
}

.col, [class^="col-"], [class*=" col-"] {
  width: 100%;
  padding-left: ($grid-gutter-width / 2) + px;
  padding-right: ($grid-gutter-width / 2) + px;
}

// make grid function
@mixin make-grid($item){
    @for $i from 1 through $grid-columns {
        .col-#{$item}-#{$i} {
            max-width: (100% / $grid-columns) * $i;
            flex:0 0 (100% / $grid-columns) * $i;
        }
    }
}


// make screen-size grid
@each $item, $screen-size in $grid-type-list {
    @if ($item!="xs") {
        @media (min-width: $screen-size + 1) {
            @include make-grid($item);
        }
    }
    @else{
      @for $i from 1 through $grid-columns {
          .col-#{$i} {
              max-width: (100% / $grid-columns) * $i;
              flex:0 0 (100% / $grid-columns) * $i;
          }
      }
    }
}
